import { FormFieldConfig } from "./steps";

export const strategyBasicsFields: Record<string, FormFieldConfig> = {
  "basics.strategyName": {
    label: "Strategy Name",
    type: "text",
    description: "Give your trading strategy a memorable name",
    placeholder: "e.g., Momentum Breakout Strategy",
    required: true,
  },
  "basics.description": {
    label: "Description",
    type: "textarea",
    description: "Optional description of your strategy approach",
    placeholder: "Describe your strategy methodology...",
    required: false,
  },
  "basics.tradingEnabled": {
    label: "Enable Trading",
    type: "switch",
    description: "Toggle to enable/disable strategy execution",
    required: true,
  },
  "basics.growthGoals.enabled": {
    label: "Enable Growth Goals",
    type: "switch",
    description: "Set specific growth targets for your strategy",
    required: true,
  },
  "basics.growthGoals.targetGrowthRate": {
    label: "Target Growth Rate (%)",
    type: "number",
    description: "Expected monthly growth percentage",
    placeholder: "5",
    suffix: "%",
    min: 0,
    max: 1000,
    step: 0.1,
    dependsOn: "basics.growthGoals.enabled",
  },
  "basics.growthGoals.targetAccountSize": {
    label: "Target Account Size",
    type: "number",
    description: "Your ultimate account size goal",
    placeholder: "100000",
    prefix: "$",
    min: 1,
    step: 1000,
    dependsOn: "basics.growthGoals.enabled",
  },
  "basics.growthGoals.targetDate": {
    label: "Target Date",
    type: "date",
    description: "When do you want to achieve this goal? (optional)",
    required: false,
    dependsOn: "basics.growthGoals.enabled",
  },
  "basics.growthGoals.compoundInterest": {
    label: "Compound Interest",
    type: "switch",
    description: "Reinvest profits to compound growth",
    dependsOn: "basics.growthGoals.enabled",
  },
  "basics.growthGoals.milestones": {
    label: "Account Milestones",
    type: "number-array",
    description: "Set intermediate account value milestones to track progress",
    placeholder: "25000, 50000, 75000",
    dependsOn: "basics.growthGoals.enabled",
  },
};

export const accountConfigFields: Record<string, FormFieldConfig> = {
  "account.accountSize": {
    label: "Account Size",
    type: "number",
    description: "Your current trading account balance",
    placeholder: "10000",
    prefix: "$",
    min: 1,
    step: 100,
    required: true,
  },
  "account.accountCurrency": {
    label: "Account Currency",
    type: "select",
    description: "Base currency for your trading account",
    options: [
      { value: "USD", label: "US Dollar (USD)" },
      { value: "EUR", label: "Euro (EUR)" },
      { value: "GBP", label: "British Pound (GBP)" },
      { value: "JPY", label: "Japanese Yen (JPY)" },
      { value: "AUD", label: "Australian Dollar (AUD)" },
      { value: "CAD", label: "Canadian Dollar (CAD)" },
    ],
    required: true,
  },
  "account.broker": {
    label: "Primary Broker",
    type: "select",
    description: "Your main trading broker",
    options: [
      { value: "Interactive Brokers", label: "Interactive Brokers" },
      { value: "TD Ameritrade", label: "TD Ameritrade" },
      { value: "Robinhood", label: "Robinhood" },
    ],
    required: true,
  },
  "account.selectedBroker": {
    label: "Execution Broker",
    type: "select",
    description:
      "Broker to use for trade execution (can be different from primary)",
    options: [
      { value: "Interactive Brokers", label: "Interactive Brokers" },
      { value: "TD Ameritrade", label: "TD Ameritrade" },
      { value: "Robinhood", label: "Robinhood" },
    ],
    required: true,
  },
};

export const riskManagementFields: Record<string, FormFieldConfig> = {
  "riskManagement.defaultRiskPercentage": {
    label: "Default Risk Per Trade (%)",
    type: "slider",
    description: "Percentage of account to risk on each trade",
    min: 0.1,
    max: 10,
    step: 0.1,
    suffix: "%",
    required: true,
  },
  "riskManagement.maxAccountRisk": {
    label: "Maximum Account Risk (%)",
    type: "slider",
    description: "Maximum total account risk across all open positions",
    min: 0.1,
    max: 50,
    step: 0.5,
    suffix: "%",
    required: true,
  },
  "riskManagement.maxCorrelatedRisk": {
    label: "Maximum Correlated Risk (%)",
    type: "slider",
    description: "Maximum risk in correlated positions",
    min: 0,
    max: 100,
    step: 1,
    suffix: "%",
    required: true,
  },
  "riskManagement.maxLosses": {
    label: "Maximum Consecutive Losses",
    type: "number",
    description: "Stop trading after this many consecutive losses",
    min: 1,
    max: 20,
    step: 1,
    required: true,
  },
  "riskManagement.moneyGoal": {
    label: "Daily Profit Goal",
    type: "number",
    description: "Stop trading when this daily profit is reached",
    placeholder: "500",
    prefix: "$",
    min: 1,
    step: 10,
    required: true,
  },
  "riskManagement.maxDrawdownPercentage": {
    label: "Maximum Drawdown (%)",
    type: "slider",
    description: "Maximum acceptable account drawdown",
    min: 0,
    max: 50,
    step: 1,
    suffix: "%",
    required: true,
  },
  "riskManagement.targetWinRate": {
    label: "Target Win Rate (%)",
    type: "slider",
    description: "Your expected win rate percentage",
    min: 0,
    max: 100,
    step: 1,
    suffix: "%",
    required: true,
  },
  "riskManagement.minimumRewardRiskRatio": {
    label: "Minimum Reward:Risk Ratio",
    type: "number",
    description: "Minimum reward-to-risk ratio for trades",
    placeholder: "2.0",
    min: 0.1,
    max: 10,
    step: 0.1,
    suffix: ":1",
    required: true,
  },
};

export const tradeExecutionFields: Record<string, FormFieldConfig> = {
  "tradeExecution.maxOpenTrades": {
    label: "Maximum Open Trades",
    type: "number",
    description: "Maximum number of simultaneous open positions",
    min: 1,
    max: 50,
    step: 1,
    required: true,
  },
  "tradeExecution.maxTradesPerDay": {
    label: "Maximum Trades Per Day",
    type: "number",
    description: "Daily trading limit to prevent overtrading",
    min: 1,
    max: 100,
    step: 1,
    required: true,
  },
  "tradeExecution.slToBreakEven": {
    label: "Move SL to Break Even",
    type: "switch",
    description: "Automatically move stop loss to break even when profitable",
    required: true,
  },
  "tradeExecution.trailingStop": {
    label: "Enable Trailing Stop",
    type: "switch",
    description: "Use trailing stop loss to lock in profits",
    required: true,
  },
  "tradeExecution.compensateForMargin": {
    label: "Compensate for Margin",
    type: "switch",
    description: "Adjust position sizes to account for margin requirements",
    required: true,
  },
  "tradeExecution.delayBetweenTrades": {
    label: "Delay Between Trades (minutes)",
    type: "number",
    description: "Minimum time delay between trade entries (optional)",
    placeholder: "5",
    min: 0,
    max: 1440,
    step: 1,
    required: false,
  },
};

export const marketAnalysisFields: Record<string, FormFieldConfig> = {
  "marketAnalysis.monitorPatterns": {
    label: "Monitor Patterns",
    type: "multi-select",
    description: "Select patterns to monitor for trading opportunities",
    options: [
      { value: "Price Action", label: "Price Action" },
      { value: "Volume", label: "Volume Analysis" },
      { value: "Momentum", label: "Momentum Indicators" },
      { value: "Support/Resistance", label: "Support/Resistance Levels" },
    ],
    required: true,
    minSelections: 1,
  },
  "marketAnalysis.marketStructure": {
    label: "Market Structure",
    type: "select",
    description: "Primary market structure this strategy targets",
    options: [
      { value: "Trending", label: "Trending Markets" },
      { value: "Ranging", label: "Ranging Markets" },
      { value: "Volatile", label: "Volatile Markets" },
      { value: "Breakout", label: "Breakout Scenarios" },
    ],
    required: true,
  },
  "marketAnalysis.retestLevelMinimum": {
    label: "Retest Level Minimum",
    type: "slider",
    description: "Minimum retest level threshold",
    min: 0,
    max: 1,
    step: 0.01,
    required: true,
  },
  "marketAnalysis.retestLevelCount": {
    label: "Retest Level Count",
    type: "number",
    description: "Number of retest levels to monitor",
    min: 1,
    max: 10,
    step: 1,
    required: true,
  },
  "marketAnalysis.minimumVolume": {
    label: "Minimum Volume Threshold",
    type: "number",
    description: "Minimum volume required for trade entry (optional)",
    placeholder: "1000000",
    min: 0,
    step: 100000,
    required: false,
  },
  "marketAnalysis.volatilityThreshold": {
    label: "Volatility Threshold",
    type: "slider",
    description: "Minimum volatility for trade consideration (optional)",
    min: 0,
    max: 100,
    step: 0.1,
    suffix: "%",
    required: false,
  },
};

export const timeParametersFields: Record<string, FormFieldConfig> = {
  "timeParameters.tradingSessionStart": {
    label: "Trading Session Start",
    type: "text",
    description: "When to start trading each day (24-hour format)",
    placeholder: "09:30",
    pattern: "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$",
    required: true,
  },
  "timeParameters.tradingSessionEnd": {
    label: "Trading Session End",
    type: "text",
    description: "When to stop trading each day (24-hour format)",
    placeholder: "16:00",
    pattern: "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$",
    required: true,
  },
  "timeParameters.timeZone": {
    label: "Time Zone",
    type: "select",
    description: "Your trading time zone",
    options: [
      { value: "America/New_York", label: "Eastern Time (EST/EDT)" },
      { value: "America/Chicago", label: "Central Time (CST/CDT)" },
      { value: "America/Denver", label: "Mountain Time (MST/MDT)" },
      { value: "America/Los_Angeles", label: "Pacific Time (PST/PDT)" },
      { value: "Europe/London", label: "London Time (GMT/BST)" },
      { value: "Europe/Frankfurt", label: "Frankfurt Time (CET/CEST)" },
      { value: "Asia/Tokyo", label: "Tokyo Time (JST)" },
      { value: "Asia/Shanghai", label: "Shanghai Time (CST)" },
      { value: "Australia/Sydney", label: "Sydney Time (AEST/AEDT)" },
    ],
    required: true,
  },
  "timeParameters.tradingDays": {
    label: "Trading Days",
    type: "checkbox-group",
    description: "Select which days of the week to trade",
    options: [
      { value: "0", label: "Sunday" },
      { value: "1", label: "Monday" },
      { value: "2", label: "Tuesday" },
      { value: "3", label: "Wednesday" },
      { value: "4", label: "Thursday" },
      { value: "5", label: "Friday" },
      { value: "6", label: "Saturday" },
    ],
    required: true,
    minSelections: 1,
  },
};

export const notificationsFields: Record<string, FormFieldConfig> = {
  "notifications.enabled": {
    label: "Enable Notifications",
    type: "switch",
    description: "Turn on/off all notifications",
    required: true,
  },
  "notifications.channels": {
    label: "Notification Channels",
    type: "multi-select",
    description: "How you want to receive notifications",
    options: [
      { value: "Email", label: "Email" },
      { value: "Push", label: "Push Notifications" },
      { value: "SMS", label: "SMS Text Messages" },
      { value: "In-App", label: "In-App Notifications" },
    ],
    dependsOn: "notifications.enabled",
    minSelections: 1,
  },
  "notifications.alertFrequency": {
    label: "Alert Frequency (minutes)",
    type: "number",
    description: "Minimum time between repeated alerts",
    placeholder: "5",
    min: 1,
    max: 1440,
    step: 1,
    suffix: "min",
    dependsOn: "notifications.enabled",
    required: true,
  },
  "notifications.thresholds.profitTarget": {
    label: "Profit Target Alert",
    type: "number",
    description: "Alert when daily profit reaches this amount",
    placeholder: "500",
    prefix: "$",
    min: 0,
    step: 10,
    dependsOn: "notifications.enabled",
    required: true,
  },
  "notifications.thresholds.lossWarning": {
    label: "Loss Warning Alert",
    type: "number",
    description: "Alert when daily loss reaches this amount",
    placeholder: "200",
    prefix: "$",
    min: 0,
    step: 10,
    dependsOn: "notifications.enabled",
    required: true,
  },
  "notifications.thresholds.riskExceeded": {
    label: "Risk Exceeded Alert",
    type: "number",
    description: "Alert when account risk exceeds this percentage",
    placeholder: "10",
    suffix: "%",
    min: 0,
    max: 100,
    step: 0.5,
    dependsOn: "notifications.enabled",
    required: true,
  },
  "notifications.thresholds.inactivity": {
    label: "Inactivity Alert (minutes)",
    type: "number",
    description: "Alert after this many minutes of no trading activity",
    placeholder: "60",
    suffix: "min",
    min: 1,
    max: 1440,
    step: 5,
    dependsOn: "notifications.enabled",
    required: true,
  },
};

export const entryConditionsFields: Record<string, FormFieldConfig> = {
  "entryConditions.enabled": {
    label: "Enable Custom Entry Conditions",
    type: "switch",
    description: "Use advanced rule-based entry conditions",
    required: true,
  },
  "entryConditions.minimumConfirmations": {
    label: "Minimum Confirmations",
    type: "number",
    description: "Number of confirmations required before entry",
    placeholder: "2",
    min: 0,
    max: 10,
    step: 1,
    dependsOn: "entryConditions.enabled",
    required: true,
  },
  "entryConditions.rootGroup": {
    label: "Entry Rules",
    type: "rule-builder",
    description: "Build complex entry conditions using AND/OR logic",
    dependsOn: "entryConditions.enabled",
    required: true,
  },
};

export const exitConditionsFields: Record<string, FormFieldConfig> = {
  "exitConditions.enabled": {
    label: "Enable Custom Exit Conditions",
    type: "switch",
    description: "Use advanced rule-based exit conditions",
    required: true,
  },
  "exitConditions.takeProfitLevels": {
    label: "Take Profit Levels",
    type: "number-array",
    description: "Multiple take profit targets (e.g., 1.5, 2.0, 3.0)",
    placeholder: "1.5, 2.0, 3.0",
    dependsOn: "exitConditions.enabled",
    required: true,
  },
  "exitConditions.stopLossLevels": {
    label: "Stop Loss Levels",
    type: "number-array",
    description: "Multiple stop loss levels (e.g., 0.5, 1.0)",
    placeholder: "0.5, 1.0",
    dependsOn: "exitConditions.enabled",
    required: true,
  },
  "exitConditions.rootGroup": {
    label: "Exit Rules",
    type: "rule-builder",
    description: "Build complex exit conditions using AND/OR logic",
    dependsOn: "exitConditions.enabled",
    required: true,
  },
};

export const positionSizingFields: Record<string, FormFieldConfig> = {
  "positionSizing.method": {
    label: "Position Sizing Method",
    type: "select",
    description: "How to calculate position sizes",
    options: [
      { value: "Fixed", label: "Fixed Dollar Amount" },
      { value: "Percentage", label: "Percentage of Account" },
      { value: "Kelly", label: "Kelly Criterion" },
      { value: "Risk-Based", label: "Risk-Based Sizing" },
    ],
    required: true,
  },
  "positionSizing.fixedSize": {
    label: "Fixed Position Size",
    type: "number",
    description: "Fixed dollar amount per position",
    placeholder: "1000",
    prefix: "$",
    min: 1,
    step: 100,
    dependsOn: "positionSizing.method",
    dependsOnValue: "Fixed",
    required: false,
  },
  "positionSizing.percentageSize": {
    label: "Percentage Size",
    type: "slider",
    description: "Percentage of account per position",
    min: 0.1,
    max: 100,
    step: 0.1,
    suffix: "%",
    dependsOn: "positionSizing.method",
    dependsOnValue: "Percentage",
    required: false,
  },
  "positionSizing.kellyFraction": {
    label: "Kelly Fraction",
    type: "slider",
    description: "Kelly Criterion fraction (0-1)",
    min: 0,
    max: 1,
    step: 0.01,
    dependsOn: "positionSizing.method",
    dependsOnValue: "Kelly",
    required: false,
  },
  "positionSizing.scaleIn": {
    label: "Enable Scale In",
    type: "switch",
    description: "Scale into positions over multiple entries",
    required: true,
  },
  "positionSizing.scaleOut": {
    label: "Enable Scale Out",
    type: "switch",
    description: "Scale out of positions over multiple exits",
    required: true,
  },
  "positionSizing.scaleInLevels": {
    label: "Scale In Levels",
    type: "number-array",
    description: "Price levels for scaling in (e.g., 0.5, 0.8, 1.0)",
    placeholder: "0.5, 0.8, 1.0",
    dependsOn: "positionSizing.scaleIn",
    required: false,
  },
  "positionSizing.scaleOutLevels": {
    label: "Scale Out Levels",
    type: "number-array",
    description: "Price levels for scaling out (e.g., 1.5, 2.0, 3.0)",
    placeholder: "1.5, 2.0, 3.0",
    dependsOn: "positionSizing.scaleOut",
    required: false,
  },
};

export const backtestFields: Record<string, FormFieldConfig> = {
  "backtest.dateRange.startDate": {
    label: "Backtest Start Date",
    type: "date",
    description: "Historical data start date for backtesting",
    required: true,
  },
  "backtest.dateRange.endDate": {
    label: "Backtest End Date",
    type: "date",
    description: "Historical data end date for backtesting",
    required: true,
  },
  "backtest.initialCapital": {
    label: "Initial Capital",
    type: "number",
    description: "Starting capital for backtest",
    placeholder: "10000",
    prefix: "$",
    min: 1,
    step: 1000,
    required: true,
  },
  "backtest.slippage": {
    label: "Slippage",
    type: "number",
    description: "Expected slippage per trade",
    placeholder: "0.05",
    suffix: "%",
    min: 0,
    max: 5,
    step: 0.01,
    required: true,
  },
  "backtest.commission": {
    label: "Commission per Trade",
    type: "number",
    description: "Commission cost per trade",
    placeholder: "1.00",
    prefix: "$",
    min: 0,
    step: 0.1,
    required: true,
  },
  "backtest.dataSource": {
    label: "Data Source",
    type: "select",
    description: "Historical data provider",
    options: [
      { value: "Yahoo Finance", label: "Yahoo Finance" },
      { value: "Alpha Vantage", label: "Alpha Vantage" },
      { value: "Quandl", label: "Quandl" },
      { value: "IEX Cloud", label: "IEX Cloud" },
      { value: "Custom", label: "Custom Data" },
    ],
    required: true,
  },
  "backtest.includeWeekends": {
    label: "Include Weekends",
    type: "switch",
    description: "Include weekend data in backtest",
    required: true,
  },
  "backtest.compareToMarket": {
    label: "Compare to Market",
    type: "switch",
    description: "Compare strategy performance to market benchmark",
    required: true,
  },
  "backtest.benchmarkIndex": {
    label: "Benchmark Index",
    type: "select",
    description: "Market index for comparison",
    options: [
      { value: "SPY", label: "S&P 500 (SPY)" },
      { value: "QQQ", label: "NASDAQ 100 (QQQ)" },
      { value: "DIA", label: "Dow Jones (DIA)" },
      { value: "IWM", label: "Russell 2000 (IWM)" },
      { value: "VTI", label: "Total Stock Market (VTI)" },
    ],
    dependsOn: "backtest.compareToMarket",
    required: false,
  },
  "backtest.monteCarlo.enabled": {
    label: "Enable Monte Carlo",
    type: "switch",
    description: "Run Monte Carlo simulations for statistical analysis",
    required: true,
  },
  "backtest.monteCarlo.simulations": {
    label: "Number of Simulations",
    type: "number",
    description: "Number of Monte Carlo simulations to run",
    placeholder: "1000",
    min: 100,
    max: 10000,
    step: 100,
    dependsOn: "backtest.monteCarlo.enabled",
    required: true,
  },
};

export const forwardTestFields: Record<string, FormFieldConfig> = {
  "forwardTest.enabled": {
    label: "Enable Forward Testing",
    type: "switch",
    description: "Test strategy with paper money in real-time",
    required: true,
  },
  "forwardTest.paperMoney.initialCapital": {
    label: "Paper Money Capital",
    type: "number",
    description: "Starting capital for paper trading",
    placeholder: "10000",
    prefix: "$",
    min: 1,
    step: 1000,
    dependsOn: "forwardTest.enabled",
    required: true,
  },
  "forwardTest.paperMoney.useRealPrices": {
    label: "Use Real-Time Prices",
    type: "switch",
    description: "Use live market prices for paper trading",
    dependsOn: "forwardTest.enabled",
    required: true,
  },
  "forwardTest.paperMoney.simulateSlippage": {
    label: "Simulate Slippage",
    type: "switch",
    description: "Include realistic slippage in paper trades",
    dependsOn: "forwardTest.enabled",
    required: true,
  },
  "forwardTest.paperMoney.simulateLatency": {
    label: "Simulate Latency",
    type: "switch",
    description: "Include realistic order execution delays",
    dependsOn: "forwardTest.enabled",
    required: true,
  },
  "forwardTest.duration.startDate": {
    label: "Forward Test Start Date",
    type: "date",
    description: "When to begin forward testing",
    dependsOn: "forwardTest.enabled",
    required: true,
  },
  "forwardTest.duration.endDate": {
    label: "Forward Test End Date",
    type: "date",
    description:
      "When to end forward testing (optional - leave blank for indefinite)",
    dependsOn: "forwardTest.enabled",
    required: false,
  },
  "forwardTest.tracking.logAllTrades": {
    label: "Log All Trades",
    type: "switch",
    description: "Keep detailed logs of all paper trades",
    dependsOn: "forwardTest.enabled",
    required: true,
  },
  "forwardTest.tracking.emailReports": {
    label: "Email Reports",
    type: "switch",
    description: "Send performance reports via email",
    dependsOn: "forwardTest.enabled",
    required: true,
  },
  "forwardTest.tracking.reportFrequency": {
    label: "Report Frequency",
    type: "select",
    description: "How often to send performance reports",
    options: [
      { value: "Daily", label: "Daily" },
      { value: "Weekly", label: "Weekly" },
      { value: "Monthly", label: "Monthly" },
    ],
    dependsOn: "forwardTest.tracking.emailReports",
    required: true,
  },
};
